{"version":3,"sources":["components/background.js","helpers.js","components/ground.js","components/screen-controller.js","components/controller.js","components/player.js","components/game.js","App.js","index.js"],"names":["Background","Sky","distance","turbidity","rayleigh","mieCoefficient","mieDirectionalG","inclination","azimuth","MAX_POLAR_ANGLE","Math","PI","ASSETS_PATH","process","Ground","useTexture","floor","normal","usePlane","position","rotation","ref","Reflector","resolution","args","mirror","mixBlur","mixStrength","blur","Material","props","color","metalness","roughnessMap","normalMap","normalScale","value","movement","callbacks","Map","type","cb","this","has","set","Set","get","add","remove","delete","event","size","values","callback","ScreenControllerContext","createContext","ScreenControllerProvider","show","children","Provider","className","baseColor","stickColor","move","dispatchEvent","stop","useScreenController","useContext","movementMap","w","s","a","d","Controller","onAttack","onMoveChanged","onSpeedChanged","useEffect","toRemove","push","addEventListener","cords","x","y","forEach","c","onKeyDown","preventDefault","key","direction","selected","onKeyUp","onClick","target","document","querySelector","loopAnimations","attackAnimations","Player","orbitRef","useRef","player","walkClock","THREE","comboResetTimer","movements","isRunning","isWalking","attack","combo","isAttackInProgress","cordsToMove","useState","selectedAction","setSelectedAction","model","useFBX","idle","useAnimationLoader","kick","smallSlash","snipSlash","walk","run","useAnimations","animations","usePlayerAnimations","actions","mixer","scale","multiplyScalar","current","rotateSpeed","animation","some","name","action","reset","fadeIn","includes","setLoop","setEffectiveTimeScale","play","clampWhenFinished","fadeOut","useFrame","clone","setY","positions","verticalSpeed","lerp","min","getElapsedTime","z","isStanding","toArray","every","pos","applyAxisAngle","getAzimuthalAngle","targetAngel","time","duration","getClip","object","dispose","OrbitControls","maxPolarAngle","maxDistance","enableDamping","enablePan","directions","startSize","running","start","setTimeout","Boolean","length","clearTimeout","Cube","useBox","mass","Game","showScreenControllers","fallback","mode","linear","dpr","camera","near","far","fov","intensity","angle","ContactShadows","width","height","Loader","App","checkIsLandscapeOrientation","isLandscape","setIsLandscape","fullscreenHandler","useFullScreenHandle","window","matchMedia","handle","active","exit","enter","isMobile","matches","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.71ed312f.chunk.js","sourcesContent":["import { Sky } from '@react-three/drei';\n\nexport function Background() {\n  return (\n    <Sky\n      distance={3000}\n      turbidity={8}\n      rayleigh={6}\n      mieCoefficient={0.005}\n      mieDirectionalG={0.8}\n      inclination={0.49}\n      azimuth={0.25}\n    />\n  );\n}\n","export const MAX_POLAR_ANGLE = Math.PI / 2 - 0.1;\nexport const ASSETS_PATH = process.env.PUBLIC_URL + '/assets';\n","import { usePlane } from '@react-three/cannon';\nimport { Reflector, useTexture } from '@react-three/drei';\nimport { ASSETS_PATH } from '../helpers';\n\nexport function Ground() {\n  const [floor, normal] = useTexture([\n    `${ASSETS_PATH}/textures/ground-texture-skin.jpg`,\n    `${ASSETS_PATH}/textures/ground-texture-color.jpg`,\n  ]);\n\n  const [ref] = usePlane(() => ({\n    position: [0, -0.01, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n  }));\n\n  return (\n    <Reflector\n      resolution={512}\n      ref={ref}\n      args={[100, 100, 4, 4]}\n      mirror={0.4}\n      mixBlur={8}\n      mixStrength={1}\n      rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n      blur={[400, 100]}\n    >\n      {(Material, props) => (\n        <Material\n          color='#797979'\n          metalness={0.4}\n          roughnessMap={floor}\n          normalMap={normal}\n          normalScale={[1, 1]}\n          {...props}\n        />\n      )}\n    </Reflector>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport { Joystick } from 'react-joystick-component';\n\nclass CustomEvent {\n  callbacks = new Map();\n\n  addEventListener(type, cb) {\n    if (!this.callbacks.has(type)) {\n      this.callbacks.set(type, new Set());\n    }\n\n    const set = this.callbacks.get(type);\n\n    if (!set.has(cb)) {\n      set.add(cb);\n    }\n\n    return {\n      remove: () => {\n        set.delete(cb);\n      },\n    };\n  }\n\n  dispatchEvent(type, event) {\n    const callbacks = this.callbacks.get(type);\n\n    if (callbacks?.size) {\n      for (const callback of [...callbacks.values()]) {\n        callback(event);\n      }\n    }\n  }\n}\n\nconst value = {\n  movement: new CustomEvent(),\n};\n\nconst ScreenControllerContext = createContext(value);\n\nexport function ScreenControllerProvider({ show, children }) {\n  function handleMove(event) {\n    value.movement.dispatchEvent('move', event);\n  }\n\n  function handleStop(event) {\n    value.movement.dispatchEvent('stop', event);\n  }\n\n  return (\n    <ScreenControllerContext.Provider value={value}>\n      {show && (\n        <div className='joystick'>\n          <Joystick\n            size={100}\n            baseColor='rgba(100, 100, 100, 0.5)'\n            stickColor='rgba(100, 100, 100, 0.8)'\n            move={handleMove}\n            stop={handleStop}\n          />\n        </div>\n      )}\n      {children}\n    </ScreenControllerContext.Provider>\n  );\n}\n\nexport function useScreenController() {\n  return useContext(ScreenControllerContext);\n}\n","import { useEffect } from 'react';\nimport EventListener from 'react-event-listener';\nimport { useScreenController } from './screen-controller';\n\nconst movementMap = {\n  w: 'forward',\n  s: 'backward',\n  a: 'left',\n  d: 'right',\n};\n\nexport function Controller({ onAttack, onMoveChanged, onSpeedChanged } = {}) {\n  const { movement } = useScreenController();\n\n  useEffect(() => {\n    const toRemove = [];\n\n    toRemove.push(\n      movement.addEventListener('move', (event) => {\n        onMoveChanged?.({\n          type: 'start',\n          cords: [event.x, event.y],\n        });\n      }),\n    );\n\n    toRemove.push(\n      movement.addEventListener('stop', (event) => {\n        onMoveChanged?.({ type: 'end' });\n      }),\n    );\n\n    return () => {\n      toRemove.forEach((c) => c.remove());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movement]);\n\n  const onKeyDown = (event) => {\n    event.preventDefault();\n\n    switch (event.key) {\n      case 'w':\n      case 'a':\n      case 's':\n      case 'd':\n        onMoveChanged?.({ type: 'start', direction: movementMap[event.key] });\n        break;\n      case 'Shift':\n        onSpeedChanged?.({ type: 'run', selected: true });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onKeyUp = (event) => {\n    event.preventDefault();\n\n    switch (event.key) {\n      case 'w':\n      case 'a':\n      case 's':\n      case 'd':\n        onMoveChanged?.({ type: 'end', direction: movementMap[event.key] });\n        break;\n      case 'Shift':\n        onSpeedChanged?.({ type: 'run', selected: false });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  function onClick(event) {\n    event.preventDefault();\n    onAttack();\n  }\n\n  return (\n    <>\n      <EventListener target='window' onKeyDown={onKeyDown} onKeyUp={onKeyUp} />\n      <EventListener target={document.querySelector('.main-canvas')} onClick={onClick} />\n    </>\n  );\n}\n","import { OrbitControls, useAnimations, useFBX } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { lerp } from 'three/src/math/MathUtils';\nimport { ASSETS_PATH, MAX_POLAR_ANGLE } from '../helpers';\nimport { Controller } from './controller';\n\nconst loopAnimations = ['idle', 'walk', 'run'];\nconst attackAnimations = ['small-slash', 'kick', 'spin-slash'];\nconst blendDuration = 0.5;\n\nexport function Player({ ...props }) {\n  const orbitRef = useRef();\n  const player = useRef({\n    walkClock: new THREE.Clock(),\n    comboResetTimer: null,\n    movements: [],\n    isRunning: false,\n    isWalking: false,\n    attack: { combo: 0, isAttackInProgress: false },\n    cordsToMove: null,\n  });\n\n  const [selectedAction, setSelectedAction] = useState();\n  const model = useFBX(`${ASSETS_PATH}/models/player.fbx`);\n  const { actions, mixer } = usePlayerAnimations(model);\n\n  useEffect(() => {\n    const size = 0.02;\n    if (model.scale.x > size) {\n      model.scale.multiplyScalar(size);\n    }\n\n    // orbitRef.current.dampingFactor = 0.5; // friction\n    orbitRef.current.rotateSpeed = 0.3; // mouse sensitivity\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const selected = selectedAction || 'idle';\n    const animation = actions[selected];\n\n    mixer.addEventListener('finished', (event) => {\n      if (attackAnimations.some((name) => actions[name] === event.action)) {\n        setSelectedAction('idle');\n      }\n    });\n    animation\n      ?.reset()\n      .fadeIn(loopAnimations.includes(selected) ? blendDuration : 0.1)\n      .setLoop(loopAnimations.includes(selected) ? THREE.LoopRepeat : THREE.LoopOnce)\n      .setEffectiveTimeScale(attackAnimations.includes(selected) ? 1.4 : 1)\n      .play();\n\n    animation.clampWhenFinished = true;\n\n    return () => {\n      animation?.fadeOut(blendDuration);\n    };\n  }, [selectedAction, actions, mixer]);\n\n  useFrame(() => {\n    orbitRef.current.target = model.position.clone().setY(2.5);\n    // WALK\n    if (player.current.isWalking && !player.current.attack.isAttackInProgress) {\n      setSelectedAction(player.current.isRunning ? 'run' : 'walk');\n    } else if (!player.current.isWalking && !player.current.attack.isAttackInProgress) {\n      setSelectedAction('idle');\n    }\n\n    const positions = new THREE.Vector3();\n    const verticalSpeed = lerp(\n      0,\n      player.current.isRunning ? 0.15 : 0.08,\n      Math.min(player.current.walkClock.getElapsedTime(), 1),\n    );\n    const horizontalSpeed = 0.02;\n\n    if (!player.current.attack.isAttackInProgress) {\n      if (player.current.cordsToMove) {\n        const [x, y] = player.current.cordsToMove;\n        positions.x = (x / 100) * verticalSpeed;\n        positions.z = (-y / 100) * verticalSpeed;\n      } else {\n        for (const movement of player.current.movements) {\n          switch (movement) {\n            case 'backward':\n              positions.z += verticalSpeed;\n              break;\n            case 'forward':\n              positions.z += -verticalSpeed;\n              break;\n            case 'right':\n              positions.x += horizontalSpeed;\n              break;\n            case 'left':\n              positions.x += -horizontalSpeed;\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n    }\n\n    const isStanding = positions.toArray().every((pos) => pos === 0);\n\n    positions.applyAxisAngle(new THREE.Vector3(0, 1, 0), orbitRef.current.getAzimuthalAngle());\n    model.position.add(positions);\n\n    if (!isStanding) {\n      const targetAngel = orbitRef.current.getAzimuthalAngle() + Math.PI;\n\n      model.rotation.y = lerp(\n        model.rotation.y,\n        targetAngel,\n        Math.min(player.current.walkClock.getElapsedTime(), 1),\n      );\n    }\n\n    // ATTACK\n    const time = actions[selectedAction]?.time;\n    const duration = actions[selectedAction]?.getClip().duration;\n\n    if (\n      !selectedAction ||\n      loopAnimations.includes(selectedAction) ||\n      time > duration - duration * 0.01\n    ) {\n      player.current.attack.isAttackInProgress = false;\n    }\n  });\n\n  return (\n    <>\n      <primitive object={model} dispose={null} />\n      <OrbitControls\n        ref={orbitRef}\n        maxPolarAngle={MAX_POLAR_ANGLE}\n        maxDistance={5}\n        enableDamping={false}\n        enablePan={false}\n      />\n      <Controller\n        onSpeedChanged={({ type, selected }) => {\n          if (type === 'run' && player.current.isWalking) {\n            player.current.isRunning = selected;\n            setSelectedAction(selected ? 'run' : null);\n          }\n        }}\n        onMoveChanged={({ type, direction, cords }) => {\n          const directions = new Set(player.current.movements);\n          const startSize = directions.size;\n\n          if (!player.current.walkClock.running) {\n            player.current.walkClock.start();\n          }\n\n          if (type === 'end') {\n            directions.delete(direction);\n          } else if (type === 'start') {\n            directions.add(direction);\n          }\n\n          if (startSize !== directions.size) {\n            setTimeout(() => {\n              player.current.walkClock.stop();\n            }, 100);\n          }\n\n          player.current.movements = [...directions.values()];\n          player.current.cordsToMove = cords;\n          player.current.isWalking = Boolean(\n            player.current.movements.length || player.current.cordsToMove,\n          );\n        }}\n        onAttack={() => {\n          if (player.current.comboResetTimer) {\n            clearTimeout(player.current.comboResetTimer);\n          }\n\n          player.current.comboResetTimer = setTimeout(() => {\n            player.current.attack.combo = 0;\n          }, 1000);\n\n          if (player.current.attack.isAttackInProgress) return;\n\n          let current = player.current.attack.combo;\n          switch (current) {\n            case 0:\n              setSelectedAction('small-slash');\n              break;\n            case 1:\n              setSelectedAction('kick');\n              break;\n            case 2:\n              setSelectedAction('spin-slash');\n              break;\n\n            default:\n              break;\n          }\n          player.current.attack.combo = current >= 2 ? 0 : current + 1;\n          player.current.attack.isAttackInProgress = true;\n        }}\n      />\n    </>\n  );\n}\n\nfunction usePlayerAnimations(model) {\n  const idle = useAnimationLoader('idle');\n  const kick = useAnimationLoader('kick');\n  const smallSlash = useAnimationLoader('small-slash');\n  const snipSlash = useAnimationLoader('spin-slash');\n  const walk = useAnimationLoader('walk');\n  const run = useAnimationLoader('run');\n\n  return useAnimations(\n    [\n      ...run.animations,\n      ...idle.animations,\n      ...kick.animations,\n      ...smallSlash.animations,\n      ...snipSlash.animations,\n      ...walk.animations,\n    ],\n    model,\n  );\n}\n\nfunction useAnimationLoader(name) {\n  const animation = useFBX(`${ASSETS_PATH}/models/animations/${name}.fbx`);\n  animation.animations[0].name = name;\n\n  return animation;\n}\n","import { Physics, useBox } from '@react-three/cannon';\nimport { ContactShadows, Loader } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react';\nimport { Background } from './background';\nimport { Ground } from './ground';\nimport { ScreenControllerProvider } from './screen-controller';\nimport { Player } from './player';\n\nfunction Cube(props) {\n  const [ref] = useBox(() => ({ mass: 1, position: [3.5, 15, 1], ...props }));\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry />\n    </mesh>\n  );\n}\n\nexport function Game({ showScreenControllers }) {\n  return (\n    <ScreenControllerProvider show={showScreenControllers}>\n      <Suspense fallback={null}>\n        <Canvas\n          className='main-canvas'\n          mode='concurrent'\n          linear\n          dpr={[1, 1.5]}\n          camera={{\n            position: [0, 0, 10],\n            near: 0.01,\n            far: 10000,\n            fov: 70,\n          }}\n        >\n          <ambientLight intensity={0.5} />\n          <spotLight position={[10, 55, 10]} angle={1} />\n          <ContactShadows\n            position={[0, 0, 0]}\n            width={100}\n            height={20}\n            far={20}\n            rotation={[Math.PI / 2, 0, 0]}\n          />\n\n          <Physics>\n            <Cube />\n            <Ground />\n            <Background />\n            <Player />\n          </Physics>\n        </Canvas>\n        <Loader />\n      </Suspense>\n    </ScreenControllerProvider>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { Game } from './components/game';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\nimport { isMobile } from 'react-device-detect';\n\nfunction App() {\n  const [isLandscape, setIsLandscape] = useState(checkIsLandscapeOrientation());\n  const fullscreenHandler = useFullScreenHandle();\n\n  function toggleFullscreen() {\n    if (fullscreenHandler.active) {\n      fullscreenHandler.exit();\n    } else {\n      fullscreenHandler.enter();\n    }\n  }\n\n  useEffect(() => {\n    window.matchMedia('(orientation: landscape)').addEventListener('change', () => {\n      setIsLandscape(checkIsLandscapeOrientation());\n    });\n  }, []);\n\n  return isLandscape ? (\n    <div className='game-container'>\n      <FullScreen handle={fullscreenHandler}>\n        <button className='button-controller fullscreen-button' onClick={toggleFullscreen}>\n          {fullscreenHandler.active ? 'Minimize' : 'Fullscreen'}\n        </button>\n        <Game showScreenControllers={isMobile} />\n      </FullScreen>\n    </div>\n  ) : (\n    <span className='orientation-container'>Make it landscape; ROTATE!</span>\n  );\n}\n\nexport default App;\n\nfunction checkIsLandscapeOrientation() {\n  return window.matchMedia('(orientation: landscape)').matches;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}